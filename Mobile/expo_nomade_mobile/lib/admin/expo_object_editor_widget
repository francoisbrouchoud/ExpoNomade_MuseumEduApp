import 'dart:collection';

import 'package:expo_nomade_mobile/app_localization.dart';
import 'package:expo_nomade_mobile/firebase_service.dart';
import 'package:expo_nomade_mobile/util/base_bo_editor_widget.dart';
import 'package:expo_nomade_mobile/util/globals.dart';
import 'package:expo_nomade_mobile/util/image_selector_widget.dart';
import 'package:expo_nomade_mobile/util/latlng_selector_widget.dart';
import 'package:expo_nomade_mobile/util/multilingual_string.dart';
import 'package:expo_nomade_mobile/util/multilingual_string_editor.dart';
import 'package:expo_nomade_mobile/util/simple_snack_bar.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../bo/expo_object.dart';
import 'package:latlong2/latlong.dart';

/// Class ExpoObjectEditorWidget est un widget utilisé pour éditer ou créer un objet ExpoObject.
class ExpoObjectEditorWidget extends StatefulWidget {
  final ExpoObject? object;

  /// Constructeur ExpoObjectEditorWidget.
  const ExpoObjectEditorWidget({Key? key, this.object}) : super(key: key);

  @override
  _ExpoObjectEditorWidgetState createState() => _ExpoObjectEditorWidgetState();
}

/// State class pour ExpoObjectEditorWidget.
class _ExpoObjectEditorWidgetState extends State<ExpoObjectEditorWidget> {
  @override
  Widget build(BuildContext context) {
    final translations = AppLocalization.of(context);
    final dataProvider = Provider.of<ExpositionNotifier>(context);
    final Exposition expo = dataProvider.exposition;
    Map<String, String> newTitleVals = widget.object?.title.toMap() ?? HashMap();
    Map<String, String> newDescVals =
        widget.object?.description.toMap() ?? HashMap();
    List<LatLng> newCoordinatesVals = widget.object?.coordinates ?? [];
    String newPicURLVal = widget.object?.pictureURL ?? "";
    return Material(
      child: BaseBOEditorWidget(
        title: widget.object != null
            ? translations.getTranslation("object_edit")
            : translations.getTranslation("object_creation"),
        content: [
          MultilingualStringEditorWidget(
            name: translations.getTranslation("title"),
            value: widget.object != null ? widget.object!.title : null,
            valueChanged: (newVals) => newTitleVals = newVals,
            mandatory: true,
          ),
          MultilingualStringEditorWidget(
            name: translations.getTranslation("description"),
            value: widget.object != null ? widget.object!.description : null,
            valueChanged: (newVals) => newDescVals = newVals,
          ),
          ImageSelectorWidget(
            name: translations.getTranslation("picture"),
            urlChanged: (newVal) => newPicURLVal = newVal,
            url: newPicURLVal,
          ),
          LatLngSelectorWidget(
            name: translations.getTranslation("coordinates"),
            values: newCoordinatesVals,
            valuesChanged: (newVals) => newCoordinatesVals = newVals,
            mandatory: true,
          ),
        ],
        object: widget.object,
        itemSaveRequested: () async {
          if (!ValidationHelper.isEmptyTranslationMap(newTitleVals) &&
              !ValidationHelper.isIncompleteLatLngListForEvent(
                  newCoordinatesVals)) {
            ExpoObject object = ExpoObject(
              "",
              MultilingualString(newTitleVals),
              MultilingualString(newDescVals),
              newCoordinatesVals,
              newPicURLVal,
            );
            if (widget.object != null) {
              object = widget.object!;
              object.title = MultilingualString(newTitleVals);
              object.description = MultilingualString(newDescVals);
              object.coordinates = newCoordinatesVals;
              object.pictureURL = newPicURLVal;
              await FirebaseService.updateObject(object);
            } else {
              ExpoObject? newObject = await FirebaseService.createObject(object);
              if (newObject != null) {
                expo.objects.add(newObject);
              }
            }
            dataProvider.forceRelaod();
            SimpleSnackBar.showSnackBar(
                context, translations.getTranslation("saved"));
            backToList();
          } else {
            SimpleSnackBar.showSnackBar(context,
                translations.getTranslation("fill_required_fields_msg"));
          }
        },
        itemDeleteRequested: () async {
          await FirebaseService.deleteObject(widget.object!);
          expo.objects.remove(widget.object!);
          dataProvider.forceRelaod();
          backToList();
        },
      ),
    );
  }

  /// Retourne à la vue de liste.
  void backToList() {
    Navigator.of(context).pop();
  }
}
